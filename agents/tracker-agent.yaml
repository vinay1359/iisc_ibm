spec_version: v1
kind: native
name: Tracker_Agent
description: Continuously monitors all complaints and tracks status progression
instructions: |
  You are the Tracker Agent - the vigilant monitor of all complaint activities.
  
  STATUS MONITORING:
  Track complaints through color-coded stages:
  - RED: Received, AI processing
  - ORANGE: Routed to department
  - BLUE: Acknowledged by department
  - GREEN: Work in progress
  - BLACK: Resolved and verified
  
  DEADLINE TRACKING:
  - Monitor acknowledgment deadlines
  - Track resolution deadlines  
  - Identify overdue complaints
  - Calculate average response times by department
  
  ALERT GENERATION:
  Generate alerts for:
  - Complaints approaching deadlines
  - Overdue acknowledgments (24+ hours past deadline)
  - Overdue resolutions (48+ hours past deadline)
  - Departments with >3 overdue complaints
  
  PERFORMANCE METRICS:
  Calculate and track:
  - Department response rates
  - Average resolution times
  - Status progression efficiency
  - Complaint resolution rates
  
  Monitor continuously and maintain comprehensive logs of all status changes.

llm: watsonx/meta-llama/llama-3-2-90b-vision-instruct
style: default

collaborators:
  - Follow_Agent

knowledge:
  - name: citizen-voice-kb
    search_settings:
      k: 5
      score_threshold: 0.7

tools:
  - status_monitor
  - deadline_tracker
  - data_analyzer
  - urgency_analyzer

imports:
  - module: knowledge.shared_memory
    alias: sm

on_message:
  - name: track_complaint
    description: Monitor routed complaints, update status, notify Escalate_Agent and Follow_Agent
    steps:
      - name: get_message
        action: |
          from knowledge import shared_memory
          messages = shared_memory.get_messages_for_agent("Tracker_Agent")
          routed_msgs = [m for m in messages if m["type"] == "routed_complaint"]
          if not routed_msgs:
              return {"status": "No routed complaints"}
          message = routed_msgs[0]
          complaint_id = message["content"]["complaint_id"]
          complaint = shared_memory.get_complaint(complaint_id)
          return {"complaint": complaint, "message_id": message["id"]}
        output: complaint_data

      - name: monitor_status
        tool: status_monitor
        input:
          complaint_id: "{{complaint_data.complaint.id}}"
          status: "{{complaint_data.complaint.status}}"
        output: status_info

      - name: track_deadlines
        tool: deadline_tracker
        input:
          complaint_id: "{{complaint_data.complaint.id}}"
          deadlines: "{{complaint_data.complaint.deadlines}}"
        output: deadline_info

      - name: analyze_data
        tool: data_analyzer
        input:
          complaint_id: "{{complaint_data.complaint.id}}"
        output: analytics_info

      - name: update_complaint_status
        action: |
          from knowledge import shared_memory
          complaint = complaint_data["complaint"]
          complaint["status"] = status_info.get("updated_status", complaint["status"])
          complaint["last_tracked"] = str(__import__('datetime').datetime.utcnow())
          complaint["tracking_info"] = {
              "status_info": status_info,
              "deadline_info": deadline_info,
              "analytics_info": analytics_info
          }
          
          shared_memory.save_complaint(complaint["id"], complaint)
          shared_memory.mark_message_read(complaint_data["message_id"])
          
          shared_memory.add_message(
              sender_agent="Tracker_Agent",
              receiver_agent="Escalate_Agent",
              message_type="tracked_complaint",
              content={"complaint_id": complaint["id"]}
          )
          shared_memory.add_message(
              sender_agent="Tracker_Agent",
              receiver_agent="Follow_Agent",
              message_type="tracked_complaint",
              content={"complaint_id": complaint["id"]}
          )
          shared_memory.add_message(
              sender_agent="Tracker_Agent",
              receiver_agent="Analytics_Agent",
              message_type="tracked_complaint",
              content={"complaint_id": complaint["id"]}
          )
        output: update_result

      - name: respond
        action: |
          return {
              "status": "Complaint tracked and notifications sent",
              "complaint_id": complaint_data["complaint"]["id"],
              "current_status": status_info.get("updated_status"),
              "deadline_status": deadline_info.get("status"),
              "notifications_sent": ["Escalate_Agent", "Follow_Agent", "Analytics_Agent"]
          }
        output: response