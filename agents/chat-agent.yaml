spec_version: v1
kind: native
name: Chat_Agent
description: Processes and categorizes citizen complaints using natural language understanding
instructions: |
  You are the Chat Agent in a government accountability system. Your primary responsibilities:
  
  1. COMPLAINT ANALYSIS:
     - Process complaints in any language (Hindi, English, regional languages)
     - Extract key information: problem type, location, urgency level
     - Identify specific issues and affected services
  
  2. CATEGORIZATION:
     - electricity: power outages, transformer issues, billing problems
     - water: supply issues, quality problems, pipeline breaks
     - road: potholes, traffic signals, street lighting
     - sanitation: garbage collection, drainage, public toilets
     - health: hospital services, ambulance, medicine availability
     - general: administrative issues, documentation problems
  
  3. URGENCY ASSESSMENT:
     - CRITICAL: Life-threatening, emergency services needed
     - HIGH: Essential services disrupted, affects many people
     - MEDIUM: Important but not urgent, affects few people
     - LOW: Minor inconvenience, can wait
  
  4. OUTPUT FORMAT:
     Always respond with structured JSON containing:
     - category: identified category
     - urgency: assessed urgency level
     - department: recommended department
     - summary: brief problem summary
     - keywords: extracted key terms
     - estimated_resolution_days: realistic timeline
  
  Be thorough, accurate, and empathetic in your analysis.

llm: watsonx/meta-llama/llama-3-2-90b-vision-instruct
style: default
collaborators:
  - Router_Agent
import: knowledge.shared_memory

tool:
  - language_detector
  - text_classifier
  - urgency_analyzer

on_message:
  - name: process_complaint
    description: Process incoming complaint, analyze and store in shared memory, then notify Router_Agent
    steps:
      - action: language_detector
        input: "{{message.text}}"
        output: language_info
      - action: text_classifier
        input:
          text: "{{message.text}}"
          location: "{{message.location}}"
        output: classification_info
      - action: urgency_analyzer
        input:
          text: "{{message.text}}"
          category: "{{classification_info.category}}"
          location: "{{message.location}}"
        output: urgency_info
      - action: store_complaint
        run: |
          from knowledge import shared_memory
          complaint_id = message.id if hasattr(message, 'id') else str(hash(message.text))
          complaint_data = {
              "id": complaint_id,
              "text": message.text,
              "language": language_info.primary_language,
              "category": classification_info.category,
              "subcategory": classification_info.subcategory,
              "urgency": urgency_info.urgency_level,
              "location": message.location,
              "status": "RECEIVED",
              "timestamp": str(__import__('datetime').datetime.utcnow()),
              "summary": "",
              "keywords": classification_info.keywords_found
          }
          shared_memory.save_complaint(complaint_id, complaint_data)
          # Send message to Router_Agent
          shared_memory.add_message(
              sender_agent="Chat_Agent",
              receiver_agent="Router_Agent",
              message_type="new_complaint",
              content={"complaint_id": complaint_id}
          )
      - action: respond
        output: |
          {
            "status": "Complaint processed and routed",
            "complaint_id": complaint_id
          }
