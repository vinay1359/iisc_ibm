spec_version: v1
kind: native
name: Chat_Agent
description: Processes and categorizes citizen complaints using natural language understanding
instructions: |
  You are the Chat Agent in a government accountability system. Your primary responsibilities:
  
  1. COMPLAINT ANALYSIS:
     - Process complaints in any language (Hindi, English, regional languages)
     - Extract key information: problem type, location, urgency level
     - Identify specific issues and affected services
  
  2. CATEGORIZATION:
     - electricity: power outages, transformer issues, billing problems
     - water: supply issues, quality problems, pipeline breaks
     - road: potholes, traffic signals, street lighting
     - sanitation: garbage collection, drainage, public toilets
     - health: hospital services, ambulance, medicine availability
     - general: administrative issues, documentation problems
  
  3. URGENCY ASSESSMENT:
     - CRITICAL: Life-threatening, emergency services needed
     - HIGH: Essential services disrupted, affects many people
     - MEDIUM: Important but not urgent, affects few people
     - LOW: Minor inconvenience, can wait
  
  4. OUTPUT FORMAT:
     Always respond with structured JSON containing:
     - category: identified category
     - urgency: assessed urgency level
     - department: recommended department
     - summary: brief problem summary
     - keywords: extracted key terms
     - estimated_resolution_days: realistic timeline
  
  Be thorough, accurate, and empathetic in your analysis.

llm: watsonx/meta-llama/llama-3-2-90b-vision-instruct
style: default

collaborators:
   - Router_Agent
   
knowledge:
  - name: citizen-voice-kb
    search_settings:
      k: 5
      score_threshold: 0.7
import:
  - knowledge.shared_memory

tools:
  - language_detector
  - text_classifier
  - urgency_analyzer

on_message:
  - name: process_complaint
    description: Process incoming complaint, analyze and store in shared memory, then notify Router_Agent
    steps:
      - name: detect_language
        tool: language_detector
        input:
          text: "{{message.text}}"
        output: language_info

      - name: classify_complaint
        tool: text_classifier
        input:
          text: "{{message.text}}"
          location: "{{message.location | default('') }}"
        output: classification_info

      - name: analyze_urgency
        tool: urgency_analyzer
        input:
          text: "{{message.text}}"
          category: "{{classification_info.category}}"
          location: "{{message.location | default('') }}"
        output: urgency_info

      - name: store_and_route
        action: |
          import knowledge.shared_memory as sm
          import uuid
          from datetime import datetime
          
          complaint_id = str(uuid.uuid4())[:8]
          
          complaint_data = {
              "id": complaint_id,
              "text": message.text,
              "language": language_info.primary_language,
              "category": classification_info.category,
              "subcategory": classification_info.subcategory,
              "urgency": urgency_info.urgency_level,
              "location": getattr(message, 'location', ''),
              "status": "RED",
              "timestamp": datetime.now().isoformat(),
              "citizen_id": getattr(message, 'citizen_id', 'anonymous'),
              "contact_info": getattr(message, 'contact_info', {}),
              "keywords": classification_info.keywords_found,
              "confidence": {
                  "language": language_info.confidence,
                  "classification": classification_info.confidence,
                  "urgency": urgency_info.confidence
              }
          }
          
          sm.save_complaint(complaint_id, complaint_data)
          
          sm.add_message(
              sender_agent="Chat_Agent",
              receiver_agent="Router_Agent", 
              message_type="new_complaint",
              content={"complaint_id": complaint_id}
          )
          
          sm.update_agent_status("Chat_Agent", "active", {
              "last_processed": complaint_id,
              "processing_time": datetime.now().isoformat()
          })
          
          return {
              "complaint_id": complaint_id,
              "status": "processed_and_routed",
              "category": classification_info.category,
              "urgency": urgency_info.urgency_level
          }
        output: result

      - name: respond_to_citizen
        action: |
          response_message = f"""
          Thank you for your complaint. Here are the details:
          
          ðŸ†” Complaint ID: {result.complaint_id}
          ðŸ“‹ Category: {classification_info.category.title()} 
          âš¡ Urgency: {urgency_info.urgency_level}
          ðŸŽ¯ Confidence: {urgency_info.confidence}
          
          Your complaint has been processed and routed to the appropriate department.
          You will receive updates on the status.
          
          Status: ðŸ”´ RECEIVED - AI Processing Complete
          Next: ðŸŸ  ROUTING TO DEPARTMENT
          """
          
          return {
              "citizen_response": response_message,
              "complaint_id": result.complaint_id,
              "next_status": "ORANGE",
              "processing_complete": True
          }
        output: citizen_response

on_error:
  - name: handle_processing_error
    action: |
      import knowledge.shared_memory as sm
      from datetime import datetime
      
      sm.update_agent_status("Chat_Agent", "error", {
          "error_message": str(error),
          "error_time": datetime.now().isoformat(),
          "input_text": getattr(message, 'text', 'unknown')[:100]
      })
      
      return {
          "error": "Processing failed",
          "message": "Please try again or contact support",
          "support_info": "Contact: support@citizen-voice.gov"
      }