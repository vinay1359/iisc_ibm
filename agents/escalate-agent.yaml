spec_version: v1
kind: native
name: Escalate_Agent
description: Escalates overdue complaints to higher authorities automatically
instructions: |
  You are the Escalate Agent - the final authority when departments fail to respond.
  
  ESCALATION TRIGGERS:
  Automatically escalate when:
  - Complaint overdue by 48+ hours with no acknowledgment
  - Complaint overdue by 5+ days with no progress update
  - Department fails to respond to 3+ reminders
  - Critical complaints not addressed within 24 hours
  
  ESCALATION HIERARCHY:
  Level 1: Department Head
  - Electricity: Chief Engineer, DERC
  - Water: CEO, Delhi Jal Board
  - Roads: Chief Engineer, PWD
  - Sanitation: Commissioner, MCD
  - Health: Director, Health Services
  
  Level 2: District Authority
  - District Collector: collector@delhi.gov.in
  - District Magistrate: dm@delhi.gov.in
  
  Level 3: State Level
  - Principal Secretary (relevant department)
  - Chief Secretary: cs@delhi.gov.in
  
  Level 4: Political Authority
  - Relevant Minister
  - Chief Minister's Office: cmo@delhi.gov.in
  
  Use escalation power judiciously but decisively when citizen welfare is at stake.

llm: watsonx/meta-llama/llama-3-2-90b-vision-instruct
style: default

collaborators:
  - Analytics_Agent

knowledge:
  - name: citizen-voice-kb
    search_settings:
      k: 5
      score_threshold: 0.7

tools:
  - urgency_analyzer
  - deadline_tracker

imports:
  - module: knowledge.shared_memory
    alias: sm

on_message:
  - name: escalate_complaint
    description: Escalate overdue or critical complaints based on tracking info
    steps:
      - name: get_message
        action: |
          from knowledge import shared_memory
          messages = shared_memory.get_messages_for_agent("Escalate_Agent")
          # Handle both tracked_complaint and escalation_required messages
          escalation_msgs = [m for m in messages if m["type"] in ["tracked_complaint", "escalation_required"]]
          if not escalation_msgs:
              return {"status": "No escalation messages"}
          message = escalation_msgs[0]
          complaint_id = message["content"]["complaint_id"]
          complaint = shared_memory.get_complaint(complaint_id)
          return {"complaint": complaint, "message_id": message["id"], "message_type": message["type"]}
        output: complaint_data

      - name: analyze_urgency
        tool: urgency_analyzer
        input:
          text: "{{complaint_data.complaint.text}}"
          category: "{{complaint_data.complaint.category}}"
        output: urgency_info

      - name: check_deadlines
        tool: deadline_tracker
        input:
          complaint_id: "{{complaint_data.complaint.id}}"
          deadlines: "{{complaint_data.complaint.deadlines}}"
        output: deadline_status

      - name: perform_escalation
        action: |
          from knowledge import shared_memory
          from datetime import datetime
          
          complaint = complaint_data["complaint"]
          urgency = urgency_info.get("urgency_level", "MEDIUM")
          deadline_overdue = deadline_status.get("overdue", False)
          follow_up_count = complaint.get("follow_up_count", 0)
          message_type = complaint_data["message_type"]
          
          # Determine if escalation is needed
          escalation_needed = False
          escalation_reason = ""
          
          if urgency == "CRITICAL":
              escalation_needed = True
              escalation_reason = "Critical urgency complaint"
          elif deadline_overdue:
              escalation_needed = True
              escalation_reason = "Deadline overdue"
          elif follow_up_count >= 3:
              escalation_needed = True
              escalation_reason = "Multiple follow-ups with no response"
          elif message_type == "escalation_required":
              escalation_needed = True
              escalation_reason = "Explicit escalation request"
          
          if escalation_needed:
              complaint["status"] = "ESCALATED"
              complaint["escalation_timestamp"] = datetime.utcnow().isoformat()
              complaint["escalation_reason"] = escalation_reason
              complaint["escalation_level"] = complaint.get("escalation_level", 0) + 1
              
              shared_memory.save_complaint(complaint["id"], complaint)
          
          shared_memory.mark_message_read(complaint_data["message_id"])
          
          return {
              "escalation_performed": escalation_needed,
              "escalation_reason": escalation_reason,
              "escalation_level": complaint.get("escalation_level", 0)
          }
        output: escalation_result

      - name: respond
        action: |
          return {
              "status": "Escalation processing complete",
              "complaint_id": complaint_data["complaint"]["id"],
              "escalated": escalation_result["escalation_performed"],
              "reason": escalation_result.get("escalation_reason", "No escalation needed"),
              "escalation_level": escalation_result.get("escalation_level", 0)
          }
        output: response