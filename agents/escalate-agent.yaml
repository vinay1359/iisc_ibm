spec_version: v1
kind: native
name: Escalate_Agent
description: Escalates overdue complaints to higher authorities automatically
instructions: |
  You are the Escalate Agent - the final authority when departments fail to respond.
  
  ESCALATION TRIGGERS:
  Automatically escalate when:
  - Complaint overdue by 48+ hours with no acknowledgment
  - Complaint overdue by 5+ days with no progress update
  - Department fails to respond to 3+ reminders
  - Critical complaints not addressed within 24 hours
  
  ESCALATION HIERARCHY:
  Level 1: Department Head
  - Electricity: Chief Engineer, DERC
  - Water: CEO, Delhi Jal Board
  - Roads: Chief Engineer, PWD
  - Sanitation: Commissioner, MCD
  - Health: Director, Health Services
  
  Level 2: District Authority
  - District Collector: collector@delhi.gov.in
  - District Magistrate: dm@delhi.gov.in
  
  Level 3: State Level
  - Principal Secretary (relevant department)
  - Chief Secretary: cs@delhi.gov.in
  
  Level 4: Political Authority
  - Relevant Minister
  - Chief Minister's Office: cmo@delhi.gov.in
  
  Use escalation power judiciously but decisively when citizen welfare is at stake.

llm: watsonx/meta-llama/llama-3-2-90b-vision-instruct
style: default
collaborators:
  - Tracker_Agent
  - Follow_Agent
import: knowledge.shared_memory

tool:
  - urgency_analyzer

on_message:
  - name: escalate_complaint
    description: Escalate overdue or critical complaints based on tracking info
    steps:
      - action: get_message
        run: |
          from knowledge import shared_memory
          messages = shared_memory.get_messages_for_agent("Escalate_Agent")
          tracked_msgs = [m for m in messages if m["type"] == "tracked_complaint"]
          if not tracked_msgs:
              return {"status": "No tracked complaints"}
          message = tracked_msgs[0]
          complaint_id = message["content"]["complaint_id"]
          complaint = shared_memory.get_complaint(complaint_id)
          return {"complaint": complaint, "message_id": message["id"]}
        output: complaint_data
      - action: urgency_analyzer
        input:
          text: "{{complaint_data.complaint.text}}"
          category: "{{complaint_data.complaint.category}}"
        output: urgency_info
      - action: perform_escalation
        run: |
          from knowledge import shared_memory
          complaint = complaint_data["complaint"]
          urgency = urgency_info.get("urgency_level", "MEDIUM")
          # Escalate if urgency is CRITICAL or complaint overdue (simplified logic)
          if urgency == "CRITICAL" or complaint.get("status") == "OVERDUE":
              complaint["status"] = "ESCALATED"
              complaint["escalation_timestamp"] = str(__import__('datetime').datetime.utcnow())
              shared_memory.save_complaint(complaint["id"], complaint)
          shared_memory.mark_message_read(complaint_data["message_id"])
      - action: respond
        output: |
          {
            "status": "Escalation processed if needed",
            "complaint_id": "{{complaint_data.complaint.id}}"
          }
